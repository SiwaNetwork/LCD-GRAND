#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –¥–ª—è CM4 —Å LCD –¥–∏—Å–ø–ª–µ–µ–º
–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã
"""

import time
import datetime
import psutil
import os
from lcd_game import LCDGame
from config import *

class Desktop:
    """
    –ö–ª–∞—Å—Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
    """
    
    def __init__(self, lcd):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
        
        Args:
            lcd: –≠–∫–∑–µ–º–ø–ª—è—Ä LCDGame
        """
        self.lcd = lcd
        self.width = DISPLAY_WIDTH
        self.height = DISPLAY_HEIGHT
        self.current_screen = "main"
        self.selected_item = 0
        self.menu_items = [
            {"name": "System Info", "icon": "üìä"},
            {"name": "Games", "icon": "üéÆ"},
            {"name": "Settings", "icon": "‚öôÔ∏è"},
            {"name": "Network", "icon": "üåê"},
            {"name": "Shutdown", "icon": "‚èª"}
        ]
        self.last_update = 0
        self.update_interval = 1.0  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    def draw_status_bar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        # –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        self.lcd.draw_rect(0, 0, self.width, 25, color=(40, 40, 40), fill=True)
        
        # –í—Ä–µ–º—è
        current_time = datetime.datetime.now().strftime("%H:%M")
        self.lcd.draw_text(current_time, 10, 5, color=(255, 255, 255), font_size=12)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ—Ç–∏
        self.lcd.draw_text("üì∂", self.width - 30, 5, color=(0, 255, 0), font_size=12)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–∞—Ç–∞—Ä–µ–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
        battery_level = 85  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        battery_color = (0, 255, 0) if battery_level > 50 else (255, 255, 0) if battery_level > 20 else (255, 0, 0)
        self.lcd.draw_text(f"üîã{battery_level}%", self.width - 80, 5, color=battery_color, font_size=10)
    
    def draw_main_screen(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        self.lcd.clear()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.draw_status_bar()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.lcd.draw_text("SHIWA NETWORK", 10, 35, color=(0, 150, 255), font_size=14)
        self.lcd.draw_text("Grand Mini", 10, 50, color=(100, 100, 100), font_size=12)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.draw_system_info()
        
        # –ú–µ–Ω—é
        self.draw_menu()
    
    def draw_system_info(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=0.1)
            self.lcd.draw_text(f"CPU: {cpu_percent}%", 10, 80, color=(255, 255, 255), font_size=10)
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            self.lcd.draw_text(f"RAM: {memory_percent}%", 10, 95, color=(255, 255, 255), font_size=10)
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
            temp = 45  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ /sys/class/thermal/
            self.lcd.draw_text(f"TEMP: {temp}¬∞C", 10, 110, color=(255, 255, 255), font_size=10)
            
            # Uptime
            uptime = datetime.datetime.now() - datetime.datetime.fromtimestamp(psutil.boot_time())
            uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            self.lcd.draw_text(f"UP: {uptime_str}", 10, 125, color=(255, 255, 255), font_size=10)
            
        except Exception as e:
            self.lcd.draw_text("System info error", 10, 80, color=(255, 0, 0), font_size=10)
    
    def draw_menu(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é"""
        menu_y = 150
        item_height = 20
        
        for i, item in enumerate(self.menu_items):
            y_pos = menu_y + i * item_height
            
            # –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if i == self.selected_item:
                self.lcd.draw_rect(5, y_pos - 2, self.width - 10, item_height, color=(0, 150, 255), fill=True)
                text_color = (255, 255, 255)
            else:
                text_color = (200, 200, 200)
            
            # –ò–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç
            self.lcd.draw_text(item["icon"], 10, y_pos, color=text_color, font_size=12)
            self.lcd.draw_text(item["name"], 35, y_pos, color=text_color, font_size=12)
    
    def draw_system_info_screen(self):
        """–≠–∫—Ä–∞–Ω —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.lcd.clear()
        self.draw_status_bar()
        
        self.lcd.draw_text("System Information", 10, 35, color=(0, 150, 255), font_size=14)
        
        try:
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            info_items = [
                f"CPU: {psutil.cpu_percent()}%",
                f"RAM: {psutil.virtual_memory().percent}%",
                f"Disk: {psutil.disk_usage('/').percent}%",
                f"Load: {os.getloadavg()[0]:.2f}",
                f"Processes: {len(psutil.pids())}",
                f"Network: Active"
            ]
            
            for i, item in enumerate(info_items):
                y_pos = 60 + i * 20
                self.lcd.draw_text(item, 10, y_pos, color=(255, 255, 255), font_size=10)
        
        except Exception as e:
            self.lcd.draw_text("Error loading system info", 10, 60, color=(255, 0, 0), font_size=10)
    
    def draw_games_screen(self):
        """–≠–∫—Ä–∞–Ω –∏–≥—Ä"""
        self.lcd.clear()
        self.draw_status_bar()
        
        self.lcd.draw_text("Games", 10, 35, color=(0, 150, 255), font_size=14)
        
        games = [
            {"name": "Snake Game", "icon": "üêç"},
            {"name": "Pong", "icon": "üèì"},
            {"name": "Tetris", "icon": "üß©"},
            {"name": "Breakout", "icon": "üèÄ"}
        ]
        
        for i, game in enumerate(games):
            y_pos = 60 + i * 30
            self.lcd.draw_text(game["icon"], 10, y_pos, color=(255, 255, 255), font_size=12)
            self.lcd.draw_text(game["name"], 35, y_pos, color=(255, 255, 255), font_size=12)
    
    def draw_settings_screen(self):
        """–≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.lcd.clear()
        self.draw_status_bar()
        
        self.lcd.draw_text("Settings", 10, 35, color=(0, 150, 255), font_size=14)
        
        settings = [
            {"name": "Display Brightness", "value": "80%"},
            {"name": "Sound Volume", "value": "70%"},
            {"name": "Auto Sleep", "value": "5min"},
            {"name": "Network Config", "value": "WiFi"},
            {"name": "System Update", "value": "Available"}
        ]
        
        for i, setting in enumerate(settings):
            y_pos = 60 + i * 25
            self.lcd.draw_text(setting["name"], 10, y_pos, color=(255, 255, 255), font_size=10)
            self.lcd.draw_text(setting["value"], self.width - 60, y_pos, color=(100, 100, 100), font_size=10)
    
    def draw_network_screen(self):
        """–≠–∫—Ä–∞–Ω —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.lcd.clear()
        self.draw_status_bar()
        
        self.lcd.draw_text("Network Status", 10, 35, color=(0, 150, 255), font_size=14)
        
        # –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        network_info = [
            "WiFi: Connected",
            "SSID: SHIWA_Network",
            "IP: 192.168.1.100",
            "Signal: -45 dBm",
            "Speed: 54 Mbps",
            "Uptime: 2h 15m"
        ]
        
        for i, info in enumerate(network_info):
            y_pos = 60 + i * 20
            self.lcd.draw_text(info, 10, y_pos, color=(255, 255, 255), font_size=10)
    
    def draw_shutdown_screen(self):
        """–≠–∫—Ä–∞–Ω –≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
        self.lcd.clear()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.lcd.draw_text("Shutdown System?", self.width // 2 - 70, self.height // 2 - 30, color=(255, 255, 255), font_size=14)
        self.lcd.draw_text("Press A to confirm", self.width // 2 - 60, self.height // 2, color=(200, 200, 200), font_size=12)
        self.lcd.draw_text("Press B to cancel", self.width // 2 - 60, self.height // 2 + 20, color=(200, 200, 200), font_size=12)
    
    def handle_input(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
        if self.lcd.buttons.is_pressed('UP'):
            if self.current_screen == "main":
                self.selected_item = max(0, self.selected_item - 1)
            return True
        
        if self.lcd.buttons.is_pressed('DOWN'):
            if self.current_screen == "main":
                self.selected_item = min(len(self.menu_items) - 1, self.selected_item + 1)
            return True
        
        if self.lcd.buttons.is_pressed('A'):
            if self.current_screen == "main":
                # –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
                selected_menu = self.menu_items[self.selected_item]["name"]
                if selected_menu == "System Info":
                    self.current_screen = "system_info"
                elif selected_menu == "Games":
                    self.current_screen = "games"
                elif selected_menu == "Settings":
                    self.current_screen = "settings"
                elif selected_menu == "Network":
                    self.current_screen = "network"
                elif selected_menu == "Shutdown":
                    self.current_screen = "shutdown"
            elif self.current_screen == "shutdown":
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
                os.system("sudo shutdown -h now")
            return True
        
        if self.lcd.buttons.is_pressed('B'):
            if self.current_screen != "main":
                self.current_screen = "main"
                self.selected_item = 0
            return True
        
        return False
    
    def update(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞"""
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        if current_time - self.last_update >= self.update_interval:
            self.last_update = current_time
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
            if self.current_screen == "main":
                self.draw_main_screen()
            elif self.current_screen == "system_info":
                self.draw_system_info_screen()
            elif self.current_screen == "games":
                self.draw_games_screen()
            elif self.current_screen == "settings":
                self.draw_settings_screen()
            elif self.current_screen == "network":
                self.draw_network_screen()
            elif self.current_screen == "shutdown":
                self.draw_shutdown_screen()
            
            self.lcd.update()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"""
        try:
            print("–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞...")
            
            while True:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
                if self.handle_input():
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    self.last_update = 0
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
                self.update()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ: {e}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
    lcd = LCDGame()
    desktop = Desktop(lcd)
    desktop.run()
    lcd.cleanup()